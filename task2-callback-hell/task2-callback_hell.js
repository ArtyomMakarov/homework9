function addString(previous, current, callback){
    setTimeout(
        () => {
            callback((previous + ' ' + current))
        },
        Math.floor(Math.random() * 100) + 1
    )
}

function addAll(){
    addString('', 'A', result => {
        addString(result, 'B', result => {
            addString(result, 'C', result => {
                console.log(result)
            })
        })
    })
}
addAll();

// Чтобы отложить выполнение какой-либо функции на потом использую callback функции. Вместо того, чтобы сразу же вернуть какой-то результат, как делает большинство функций, эти использующие обратные вызовы функции требуют время для получения результата. Например, мы ждём пока придут данные с сервера и нам нужна фунция, которая после прихода данных будет выполнять что-то, выведет ошибку или будет работать дальше. Callback Hell происходит, когда реализована большая вложенность таких вот самовызывающихся функций. Порядок, в котором всё происходит, не идёт сверху вниз — он перескакивает в зависимости от того, когда завершаются действия. Поэтому отследить такое вот решение очень сложно и лучше так не делать.
